diff -u -r netperf-netperf-2.7.0/src/netlib.h netperf-netperf-2.7.0-patch/src/netlib.h
--- netperf-netperf-2.7.0/src/netlib.h  2024-06-18 23:51:46.843104586 +0000
+++ netperf-netperf-2.7.0-patch/src/netlib.h    2024-06-18 23:53:06.098984482 +0000
@@ -22,7 +22,7 @@
                                         /* can tests send...            */
 #define         MAXTIMES        4       /* how many times may we loop   */
                                         /* to calibrate                 */
-#define         MAXCPUS         256     /* how many CPU's can we track */
+#define         MAXCPUS        1024     /* how many CPU's can we track */
 #define         MAXMESSAGESIZE  65536
 #define         MAXALIGNMENT    16384
 #define         MAXOFFSET        4096
diff -u -r netperf-netperf-2.7.0/src/nettest_omni.c netperf-netperf-2.7.0-patch/src/nettest_omni.c
--- netperf-netperf-2.7.0/src/nettest_omni.c    2022-12-03 05:09:26.736666047 +0000
+++ netperf-netperf-2.7.0-patch/src/nettest_omni.c      2022-12-03 05:29:04.883140961 +0000
@@ -4416,7 +4416,7 @@
          /* "start over" on a demo interval. we will forget about
          everything that happened in the demo interval up to the
          timeout and begin fresh. */
-         demo_reset(); 
+         //demo_reset(); 
 #endif /* WANT_DEMO */
 
          continue;
diff -u -r netperf-2.7.0/src/nettest_omni.c netperf-2.7.0-patch/src/nettest_omni.c
--- netperf-2.7.0/src/nettest_omni.c      2022-03-15 22:50:10.047785864 +0000
+++ netperf-2.7.0-patch/src/nettest_omni.c        2022-03-15 23:10:09.067699443 +0000
@@ -456,14 +456,6 @@
 
  /* different options for the sockets                          */
 
-int
-  loc_nodelay,         /* don't/do use NODELAY locally         */
-  rem_nodelay,         /* don't/do use NODELAY remotely        */
-  loc_sndavoid,                /* avoid send copies locally            */
-  loc_rcvavoid,                /* avoid recv copies locally            */
-  rem_sndavoid,                /* avoid send copies remotely           */
-  rem_rcvavoid;        /* avoid recv_copies remotely           */
-
 extern int
   loc_tcpcork,
   rem_tcpcork,
diff -u -r netperf-2.7.0/src/netlib.c netperf-2.7.0-patch/src/netlib.c
--- netperf-2.7.0/src/netlib.c	2015-07-20 12:39:35.000000000 -0500
+++ netperf-2.7.0-patch/src/netlib.c	2020-01-13 14:40:59.727719673 -0600
@@ -110,6 +110,7 @@ char    netlib_id[]="\
 #include <time.h>
 #include <winsock2.h>
 #define netperf_socklen_t socklen_t
+#define WIN32_LEAN_AND_MEAN 1
 #include <windows.h>
 #include <mmsystem.h>
 /* the only time someone should need to define DONT_IPV6 in the
@@ -119,8 +120,6 @@ char    netlib_id[]="\
 #include <ws2tcpip.h>
 #endif
 
-#include <windows.h>
-
 #define SIGALRM (14)
 #define sleep(x) Sleep((x)*1000)
 
@@ -229,6 +228,11 @@ int     local_proc_affinity = -1,remote_
 char local_data_port[10];
 char remote_data_port[10];
 
+// See comment in netlib.h
+uint32_t think_time = 0;
+uint32_t think_time_array_size = 0;
+uint32_t think_time_run_length = 0;
+
 char *local_data_address=NULL;
 char *remote_data_address=NULL;
 
@@ -2271,7 +2275,7 @@ shutdown_control()
   2004/12/13 */
 
 void
-bind_to_specific_processor(int processor_affinity, int use_cpu_map)
+bind_to_specific_processor(int use_cpu_affinity, int use_cpu_map)
 {
 
   int mapped_affinity;
@@ -2282,10 +2286,10 @@ bind_to_specific_processor(int processor
      a suitable CPU id even when the space is not contiguous and
      starting from zero */
   if (use_cpu_map) {
-    mapped_affinity = lib_cpu_map[processor_affinity];
+    mapped_affinity = lib_cpu_map[use_cpu_affinity];
   }
   else {
-    mapped_affinity = processor_affinity;
+    mapped_affinity = use_cpu_affinity;
   }
 
 #ifdef HAVE_MPCTL
@@ -2378,7 +2382,7 @@ bind_to_specific_processor(int processor
     if ((mapped_affinity < 0) ||
 	(mapped_affinity > MAXIMUM_PROCESSORS)) {
       fprintf(where,
-	      "Invalid processor_affinity specified: %d\n", mapped_affinity);      fflush(where);
+	      "Invalid use_cpu_affinity specified: %d\n", mapped_affinity);      fflush(where);
       return;
     }
 
@@ -2406,6 +2410,22 @@ bind_to_specific_processor(int processor
     }
   }
 
+#elif defined(__FreeBSD__)
+#include <sys/param.h>
+  /* FreeBSD introduced cpuset_setaffinity() in version 7.1 */
+#if (__FreeBSD_version > 701000)
+#include <sys/cpuset.h>  
+
+  cpuset_t mask;
+
+  CPU_ZERO(&mask);
+  CPU_SET(mapped_affinity, &mask);
+  if (cpuset_setaffinity(CPU_LEVEL_WHICH, CPU_WHICH_PID, -1,
+			 sizeof(mask), &mask)) {
+	perror("cpuset_setaffinity failed");
+	fflush(stderr);
+  }
+#endif /* __FreeBSD_version */    
 #else
   if (debug) {
     fprintf(where,
@@ -3997,11 +4017,7 @@ void demo_stream_setup(uint32_t a, uint3
   }
 }
 
-#ifdef WIN32
-__forceinline void demo_interval_display(double actual_interval)
-#else
-  inline void demo_interval_display(double actual_interval)
-#endif
+void demo_interval_display(double actual_interval)
 {
   static int count = 0;
   struct timeval now;
@@ -4060,15 +4076,7 @@ __forceinline void demo_interval_display
    important compilers have supported such a construct so it should
    not be a big deal. raj 2012-01-23 */
 
-#ifdef WIN32
-/* It would seem that the Microsoft compiler will not inline across
-   source files. So there is little point in having an inline
-   directive in that situation.  Of course that makes me wonder if an
-   inline directive has to appear in netlib.h... */
 void demo_interval_tick(uint32_t units)
-#else
-  inline void demo_interval_tick(uint32_t units)
-#endif
 {
   double actual_interval = 0.0;
 
@@ -4328,9 +4336,8 @@ output_row(FILE *fd, char *title, int *r
   for(i = 0; i < 10; i++){
     sum = 0;
     for (j = i * base; j <  (i + 1) * base; j++) {
-      sum += row[j];
+      fprintf(where,": %4d", row[j]);
     }
-    fprintf(where,": %4d", sum);
   }
   fprintf(where,"\n");
 }
diff -u -r netperf-2.6.0/src/netlib.h netperf-2.6.0-patch/src/netlib.h
--- netperf-2.6.0/src/netlib.h	2012-06-19 13:46:47.000000000 -0700
+++ netperf-2.6.0-patch/src/netlib.h	2016-11-04 16:35:53.949222735 -0700
@@ -458,6 +458,11 @@
 extern char local_data_port[10];
 extern char remote_data_port[10];
 
+// Time in nanoseconds to do pointless work after each request received
+extern uint32_t think_time;
+extern uint32_t think_time_array_size;
+extern float think_time_run_length;
+
 extern char *local_data_address;
 extern char *remote_data_address;
 
diff -u -r netperf-2.6.0/src/nettest_bsd.h netperf-2.6.0-patch/src/nettest_bsd.h
--- netperf-2.6.0/src/nettest_bsd.h	2012-06-19 13:47:09.000000000 -0700
+++ netperf-2.6.0-patch/src/nettest_bsd.h	2016-11-02 11:10:13.542697954 -0700
@@ -66,6 +66,10 @@
 
   int32_t    test_length;    /* how long is the test? */
 
+  uint32_t   think_time;               /* how long to pointlessly think on each request */
+  uint32_t   think_time_array_size;    /* size of pointer chase array for think_time work */
+  uint32_t   think_time_run_length; /* the number of contiguous elements in the think time array to sum */
+
   uint32_t   so_rcvavoid;    /* avoid copies on recv? */
   uint32_t   so_sndavoid;    /* avoid copies on send? */
   uint32_t   send_dirty_count; /* bytes to dirty before calling send */
diff -u -r netperf-2.6.0/src/nettest_omni.c netperf-2.6.0-patch/src/nettest_omni.c
--- netperf-2.6.0/src/nettest_omni.c	2012-06-19 13:33:48.000000000 -0700
+++ netperf-2.6.0-patch/src/nettest_omni.c	2016-11-04 16:37:37.472977329 -0700
@@ -3759,6 +3759,10 @@
       omni_request->socket_prio            = remote_socket_prio;
       omni_request->socket_tos             = remote_socket_tos;
 
+      omni_request->think_time = think_time;
+      omni_request->think_time_array_size = think_time_array_size;
+      omni_request->think_time_run_length = think_time_run_length;
+
       /* we have no else clauses here because we previously set flags
 	 to zero above raj 20090803 */
       if (rem_nodelay)
@@ -4932,6 +4936,11 @@
	  omni_request->cong_control,
 	  sizeof(local_cong_control_req));
 
+  // Extract think_time parameters
+  think_time = omni_request->think_time;
+  think_time_array_size = omni_request->think_time_array_size;
+  think_time_run_length = omni_request->think_time_run_length;
+
   /* based on what we have been told by the remote netperf, we want to
      setup our endpoint for the "data connection" and let the remote
      netperf know the situation. */
@@ -5240,6 +5249,16 @@
   addrlen = sizeof(peeraddr_in);
   memset(&peeraddr_in,0,sizeof(peeraddr_in));
 
+
+  uint32_t* think_time_array;
+  if (think_time > 0 && think_time_array_size > 0) {
+    // Create a big array to randomly traverse
+    // Don't bother intializing elements - we're just going to pointlessly sum things to force the CPU to read
+    // memory locations and do work. It should just be filled with random numbers anyway
+    think_time_array = malloc(sizeof(uint32_t) * think_time_array_size);
+    fprintf(where, "Finished creating think time array\n");
+  }
+
   /* Now it's time to start receiving data on the connection. We will */
   /* first grab the apropriate counters and then start grabbing. */
 
@@ -5409,6 +5428,27 @@
       recv_ring = recv_ring->next;
     }
 
+    if (think_time > 0) {
+      // Do think time here before we send the response
+      struct timespec think_start, cur_time;
+      uint32_t sum = 0;
+      clock_gettime(CLOCK_MONOTONIC, &think_start);
+      while (1) {
+        const uint64_t billion = 1000000000L;
+        // Get elapsed time
+        clock_gettime(CLOCK_MONOTONIC, &cur_time);
+        // Calculate the delta time
+        uint64_t diff = billion * (cur_time.tv_sec - think_start.tv_sec) + cur_time.tv_nsec - think_start.tv_nsec;
+        // Check if it's time to break out
+        if (diff > think_time)
+          break;
+        uint32_t i;
+        uint32_t run_start = rand() % think_time_array_size;
+        for (i = run_start; i < think_time_run_length; i++)
+          sum = think_time_array[i];
+      }
+    }
+
     /* if we should try to send something, then by all means, let us
        try to send something. */
     if ((omni_request->direction & NETPERF_XMIT) &&
@@ -5522,6 +5562,10 @@
     }
   }
 
+  if (think_time > 0) {
+      free(think_time_array);
+  }
+
   /* The current iteration loop now exits due to timeout or unit count
      being  reached */
   stop_timer();
@@ -6895,7 +6939,7 @@
 
 {
 
-#define OMNI_ARGS "aBb:cCd:De:FgG:hH:i:Ij:kK:l:L:m:M:nNoOp:P:r:R:s:S:t:T:u:UVw:W:46"
+#define OMNI_ARGS "aBb:cCd:De:FgG:hH:i:Ij:kK:l:L:m:M:nNoOp:P:r:R:s:S:t:T:u:UVw:W:X:46"
 
   extern char	*optarg;	  /* pointer to option string	*/
 
@@ -7218,6 +7262,13 @@
       test_uuid[sizeof(test_uuid) - 1] = 0;
       have_uuid = 1;
       break;
+    case 'X':
+      break_args(optarg, arg1, arg2);
+      break_args(optarg+strlen(arg1)+1, arg2, arg3);
+      think_time = convert(arg1);
+      think_time_array_size = convert(arg2);
+      think_time_run_length = atof(arg3);
+      break;
     case 'W':
       /* set the "width" of the user space data */
       /* buffer. This will be the number of */
diff -u -r netperf-2.6.0/doc/examples/runemomniaggdemo.sh netperf-2.6.0-patch/doc/examples/runemomniaggdemo.sh
--- netperf-2.6.0/doc/examples/runemomniaggdemo.sh 2020-01-13 13:37:25.111724897 -0600
+++ netperf-2.6.0-patch/doc/examples/runemomniaggdemo.sh 2020-01-13 13:38:21.111724897 -0600
@@ -1,13 +1,20 @@
 # this is a quick and dirty migration of runemomniagg2.sh to the 
 # --enable-demo mode of aggregate testing
 function kill_netperfs {
+    echo "Killing netperfs"
     pkill -ALRM netperf
+    NETPERF_PROC=$(pgrep -P 1 -f netperf)
+
+    if [ -n "$NETPERF_PROC" ]; 
+    then
+        kill $NETPERF_PROC; 
+    fi
 
     pgrep -P 1 -f netperf > /dev/null
     while [ $? -eq 0 ]
     do
-	sleep 1
-	pgrep -P 1 -f netperf > /dev/null
+    sleep 1
+    pgrep -P 1 -f netperf > /dev/null
     done
 }
 
@@ -148,7 +155,7 @@
 
 # we assume that netservers are already running on all the load generators
 
-DURATION=120
+DURATION=60
 # do not have a uuidgen? then use the one in netperf
 MY_UUID=`uuidgen`
 # with top-of-trunk we could make this 0 and run forever
@@ -157,16 +164,16 @@
 LENGTH="-l 7200"
 OUTPUT="-o all"
 
-DO_STREAM=1;
-DO_MAERTS=1;
+DO_STREAM=0;
+DO_MAERTS=0;
 # NOTE!  The Bidir test depends on being able to set a socket buffer
 # size greater than 13 * 64KB or 832 KB or there is a risk of the test
 # hanging.  If you are running linux, make certain that
 # net.core.[r|w]mem_max are sufficiently large
-DO_BIDIR=1;
+DO_BIDIR=0;
-DO_RRAGG=1;
+DO_RRAGG=0;
-DO_RR=1;
-DO_ANCILLARY=1;
+DO_RR=0;
+DO_ANCILLARY=0;
 
 # UDP_RR for TPC/PPS using single-byte transactions. we do not use
 # TCP_RR any longer because any packet losses or other matters

diff -u -r netperf-2.7.0/config.guess  netperf-2.7.0-patch/config.guess
--- netperf-2.7.0/config.guess  2015-07-20 17:39:35.000000000 +0000
+++ netperf-2.7.0-patch/config.guess    2020-10-27 00:55:55.655438821 +0000
@@ -814,6 +814,9 @@
     i*86:Minix:*:*)
        echo ${UNAME_MACHINE}-pc-minix
        exit ;;
+    aarch64*:Linux:*:*)
+       echo ${UNAME_MACHINE}-unknown-linux-gnu
+       exit ;;
     arm*:Linux:*:*)
        echo ${UNAME_MACHINE}-unknown-linux-gnu
        exit ;;
@@ -882,6 +885,9 @@
     ppc64:Linux:*:*)
        echo powerpc64-unknown-linux-gnu
        exit ;;
+    ppc64le:Linux:*:*)
+       echo powerpc64le-unknown-linux-gnu
+       exit ;;
     alpha:Linux:*:*)
        case `sed -n '/^cpu model/s/^.*: \(.*\)/\1/p' < /proc/cpuinfo` in
          EV5)   UNAME_MACHINE=alphaev5 ;;

diff -u -r netperf-2.7.0/doc/examples/post_proc.py netperf-2.7.0-patch/doc/examples/post_proc.py
--- netperf-2.7.0/doc/examples/post_proc.py 2015-07-20 12:39:35.000000000 -0500
+++ netperf-2.7.0-patch/doc/examples/post_proc.py   2021-07-16 10:22:34.642546090 -0500
@@ -125,7 +125,7 @@
             ksink[key] += float(result[0])
         else:
             if result[0]:
-                print "Key %d not in ksink" % key
+                print("Key %d not in ksink" % key)
 
 def process_result(basename, raw_results, end_time, ksink):
     first_result = True
@@ -209,7 +209,7 @@
             try:
                 update_rrd(basename,interim_result,interim_end)
             except Exception as e:
-                print "Update to %s with %s at %s failed with %s" % (basename,interim_result,interim_end,e)
+                print("Update to %s with %s at %s failed with %s" % (basename,interim_result,interim_end,e))
             have_result = False
             had_results = True
 
@@ -221,7 +221,7 @@
         return 0, 0
 
 def process_result_files(prefix,start_time,end_time,ksink):
-    print "Prefix is %s" % prefix
+    print("Prefix is %s" % prefix)
     min_timestamp = 9999999999.9
     results_list = glob.glob(prefix+"*.out")
 
@@ -254,13 +254,13 @@
     # find that key in the kitchen sink, we will use the value to
     # update the overall rrd.
     prevkey = -1
-    for key in xrange(int(start_time),int(end_time)+1):
+    for key in range(int(start_time),int(end_time)+1):
         if key in ksink:
             try:
                 update_rrd(overall,ksink[key],key)
                 prevkey = key
             except Exception as e:
-                print "Update to %s failed for %d, previous %d %s" % (overall, key, prevkey, e)
+                print("Update to %s failed for %d, previous %d %s" % (overall, key, prevkey, e))
 
 def overall_min_max_avg(prefix,start_time,end_time,intervals):
 
@@ -312,7 +312,7 @@
         imax = float(result[2].strip('"'))
         results_list.append((iavg, imin, imax, start, end))
 
-        for time in xrange(start,end+1):
+        for time in range(start,end+1):
             rrdtool.update(prefix + "_intervals.rrd",
                            '%d:%f:%f:%f' % (time, iavg, imin, imax))
         if iavg > max_average:
@@ -444,13 +444,13 @@
     # the time being I will preallocate the entire dict in one fell
     # swoop until I can modify add_to_ksink() accordingly
     length = int(end_time + 1) - int(start_time)
-    ksink=dict(zip(xrange(int(start_time),
+    ksink=dict(zip(range(int(start_time),
                           int(end_time)+1),
                    [0.0] * length))
 
     min_timestamp = process_result_files(prefix,start_time,end_time,ksink)
     if min_timestamp == 9999999999.9:
-        print "There were no valid results for this prefix!"
+        print("There were no valid results for this prefix!")
         exit()
 
 #    print "Min timestamp for %s is %s start time is %s end_time is %s" % (prefix,min_timestamp,start_time,end_time)
@@ -471,12 +471,12 @@
                          annotation=args.annotation,override=args.title)
     
     units, multiplier, direction = units_et_al_by_prefix(prefix)
-    print "Average of peak interval is %.3f %s from %d to %d" % (results_list[0][0] * float(multiplier), units, peak_start, peak_end)
-    print "Minimum of peak interval is %.3f %s from %d to %d" % (peak_minimum * float(multiplier), units, peak_start, peak_end)
-    print "Maximum of peak interval is %.3f %s from %d to %d" % (peak_maximum * float(multiplier), units, peak_start, peak_end)
+    print("Average of peak interval is %.3f %s from %d to %d" % (results_list[0][0] * float(multiplier), units, peak_start, peak_end))
+    print("Minimum of peak interval is %.3f %s from %d to %d" % (peak_minimum * float(multiplier), units, peak_start, peak_end))
+    print("Maximum of peak interval is %.3f %s from %d to %d" % (peak_maximum * float(multiplier), units, peak_start, peak_end))
 
     if args.intervals:
         for id, interval in enumerate(results_list[1:]):
-            print "Average of interval %d is %.3f %s from %d to %d" % (id, interval[0] * float(multiplier), units, interval[3], interval[4])
-            print "Minimum of interval %d is %.3f %s from %d to %d" % (id, interval[1] * float(multiplier), units, interval[3], interval[4])
-            print "Maximum of interval %d is %.3f %s from %d to %d" % (id, interval[2] * float(multiplier), units, interval[3], interval[4])
+            print("Average of interval %d is %.3f %s from %d to %d" % (id, interval[0] * float(multiplier), units, interval[3], interval[4]))
+            print("Minimum of interval %d is %.3f %s from %d to %d" % (id, interval[1] * float(multiplier), units, interval[3], interval[4]))
+            print("Maximum of interval %d is %.3f %s from %d to %d" % (id, interval[2] * float(multiplier), units, interval[3], interval[4]))
